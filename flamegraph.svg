<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="2075"><g><title>libdyld.dylib`start (1 samples, 0.05%)</title><rect x="0.0000%" y="277" width="0.0482%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>osiris-899694198ab63869`main (1 samples, 0.05%)</title><rect x="0.0000%" y="261" width="0.0482%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>osiris-899694198ab63869`std::rt::lang_start_internal (1 samples, 0.05%)</title><rect x="0.0000%" y="245" width="0.0482%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.05%)</title><rect x="0.0000%" y="229" width="0.0482%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>osiris-899694198ab63869`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="0.0482%" y="149" width="0.0482%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2982%" y="159.50"></text></g><g><title>osiris-899694198ab63869`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="0.0482%" y="133" width="0.0482%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2982%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="0.0482%" y="117" width="0.0482%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2982%" y="127.50"></text></g><g><title>osiris-899694198ab63869`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll (11 samples, 0.53%)</title><rect x="0.0964%" y="133" width="0.5301%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="11"/><text x="0.3464%" y="143.50"></text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once (9 samples, 0.43%)</title><rect x="0.6265%" y="133" width="0.4337%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="9"/><text x="0.8765%" y="143.50"></text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::insert (25 samples, 1.20%)</title><rect x="1.0602%" y="133" width="1.2048%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="25"/><text x="1.3102%" y="143.50"></text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (196 samples, 9.45%)</title><rect x="2.2651%" y="133" width="9.4458%" height="15" fill="rgb(250,228,42)" fg:x="47" fg:w="196"/><text x="2.5151%" y="143.50">osiris-8996941..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.43%)</title><rect x="28.1928%" y="117" width="0.4337%" height="15" fill="rgb(240,193,28)" fg:x="585" fg:w="9"/><text x="28.4428%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.24%)</title><rect x="28.6265%" y="117" width="0.2410%" height="15" fill="rgb(216,20,37)" fg:x="594" fg:w="5"/><text x="28.8765%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="28.8675%" y="117" width="0.0482%" height="15" fill="rgb(206,188,39)" fg:x="599" fg:w="1"/><text x="29.1175%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.05%)</title><rect x="28.9157%" y="117" width="0.0482%" height="15" fill="rgb(217,207,13)" fg:x="600" fg:w="1"/><text x="29.1657%" y="127.50"></text></g><g><title>osiris-899694198ab63869`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.14%)</title><rect x="28.9639%" y="117" width="0.1446%" height="15" fill="rgb(231,73,38)" fg:x="601" fg:w="3"/><text x="29.2139%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (26 samples, 1.25%)</title><rect x="32.8193%" y="101" width="1.2530%" height="15" fill="rgb(225,20,46)" fg:x="681" fg:w="26"/><text x="33.0693%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.43%)</title><rect x="34.0723%" y="101" width="0.4337%" height="15" fill="rgb(210,31,41)" fg:x="707" fg:w="9"/><text x="34.3223%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (88 samples, 4.24%)</title><rect x="34.5060%" y="101" width="4.2410%" height="15" fill="rgb(221,200,47)" fg:x="716" fg:w="88"/><text x="34.7560%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (50 samples, 2.41%)</title><rect x="36.3373%" y="85" width="2.4096%" height="15" fill="rgb(226,26,5)" fg:x="754" fg:w="50"/><text x="36.5873%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_size (43 samples, 2.07%)</title><rect x="36.6747%" y="69" width="2.0723%" height="15" fill="rgb(249,33,26)" fg:x="761" fg:w="43"/><text x="36.9247%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (43 samples, 2.07%)</title><rect x="43.9036%" y="69" width="2.0723%" height="15" fill="rgb(235,183,28)" fg:x="911" fg:w="43"/><text x="44.1536%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (208 samples, 10.02%)</title><rect x="38.7470%" y="101" width="10.0241%" height="15" fill="rgb(221,5,38)" fg:x="804" fg:w="208"/><text x="38.9970%" y="111.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (179 samples, 8.63%)</title><rect x="40.1446%" y="85" width="8.6265%" height="15" fill="rgb(247,18,42)" fg:x="833" fg:w="179"/><text x="40.3946%" y="95.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (58 samples, 2.80%)</title><rect x="45.9759%" y="69" width="2.7952%" height="15" fill="rgb(241,131,45)" fg:x="954" fg:w="58"/><text x="46.2259%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (21 samples, 1.01%)</title><rect x="48.7711%" y="101" width="1.0120%" height="15" fill="rgb(249,31,29)" fg:x="1012" fg:w="21"/><text x="49.0211%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.19%)</title><rect x="49.7831%" y="101" width="0.1928%" height="15" fill="rgb(225,111,53)" fg:x="1033" fg:w="4"/><text x="50.0331%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.43%)</title><rect x="49.9759%" y="101" width="0.4337%" height="15" fill="rgb(238,160,17)" fg:x="1037" fg:w="9"/><text x="50.2259%" y="111.50"></text></g><g><title>osiris-899694198ab63869`&lt;T as core::any::Any&gt;::type_id (6 samples, 0.29%)</title><rect x="50.4096%" y="101" width="0.2892%" height="15" fill="rgb(214,148,48)" fg:x="1046" fg:w="6"/><text x="50.6596%" y="111.50"></text></g><g><title>osiris-899694198ab63869`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.43%)</title><rect x="50.6988%" y="101" width="0.4337%" height="15" fill="rgb(232,36,49)" fg:x="1052" fg:w="9"/><text x="50.9488%" y="111.50"></text></g><g><title>osiris-899694198ab63869`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll_join (14 samples, 0.67%)</title><rect x="51.1325%" y="101" width="0.6747%" height="15" fill="rgb(209,103,24)" fg:x="1061" fg:w="14"/><text x="51.3825%" y="111.50"></text></g><g><title>osiris-899694198ab63869`__rdl_alloc (4 samples, 0.19%)</title><rect x="51.8072%" y="101" width="0.1928%" height="15" fill="rgb(229,88,8)" fg:x="1075" fg:w="4"/><text x="52.0572%" y="111.50"></text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once (17 samples, 0.82%)</title><rect x="52.0000%" y="101" width="0.8193%" height="15" fill="rgb(213,181,19)" fg:x="1079" fg:w="17"/><text x="52.2500%" y="111.50"></text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.24%)</title><rect x="52.8193%" y="101" width="0.2410%" height="15" fill="rgb(254,191,54)" fg:x="1096" fg:w="5"/><text x="53.0693%" y="111.50"></text></g><g><title>osiris-899694198ab63869`osiris::runtime::current_unwrap (19 samples, 0.92%)</title><rect x="53.0602%" y="101" width="0.9157%" height="15" fill="rgb(241,83,37)" fg:x="1101" fg:w="19"/><text x="53.3102%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 1.16%)</title><rect x="58.4578%" y="37" width="1.1566%" height="15" fill="rgb(233,36,39)" fg:x="1213" fg:w="24"/><text x="58.7078%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (128 samples, 6.17%)</title><rect x="55.9036%" y="69" width="6.1687%" height="15" fill="rgb(226,3,54)" fg:x="1160" fg:w="128"/><text x="56.1536%" y="79.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (113 samples, 5.45%)</title><rect x="56.6265%" y="53" width="5.4458%" height="15" fill="rgb(245,192,40)" fg:x="1175" fg:w="113"/><text x="56.8765%" y="63.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (51 samples, 2.46%)</title><rect x="59.6145%" y="37" width="2.4578%" height="15" fill="rgb(238,167,29)" fg:x="1237" fg:w="51"/><text x="59.8645%" y="47.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (163 samples, 7.86%)</title><rect x="54.4578%" y="85" width="7.8554%" height="15" fill="rgb(232,182,51)" fg:x="1130" fg:w="163"/><text x="54.7078%" y="95.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.24%)</title><rect x="62.0723%" y="69" width="0.2410%" height="15" fill="rgb(231,60,39)" fg:x="1288" fg:w="5"/><text x="62.3223%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.34%)</title><rect x="62.3133%" y="85" width="0.3373%" height="15" fill="rgb(208,69,12)" fg:x="1293" fg:w="7"/><text x="62.5633%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.14%)</title><rect x="62.6506%" y="85" width="0.1446%" height="15" fill="rgb(235,93,37)" fg:x="1300" fg:w="3"/><text x="62.9006%" y="95.50"></text></g><g><title>osiris-899694198ab63869`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.24%)</title><rect x="62.7952%" y="85" width="0.2410%" height="15" fill="rgb(213,116,39)" fg:x="1303" fg:w="5"/><text x="63.0452%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.87%)</title><rect x="64.5301%" y="69" width="0.8675%" height="15" fill="rgb(222,207,29)" fg:x="1339" fg:w="18"/><text x="64.7801%" y="79.50"></text></g><g><title>osiris-899694198ab63869`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.19%)</title><rect x="65.3976%" y="69" width="0.1928%" height="15" fill="rgb(206,96,30)" fg:x="1357" fg:w="4"/><text x="65.6476%" y="79.50"></text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.82%)</title><rect x="65.5904%" y="69" width="0.8193%" height="15" fill="rgb(218,138,4)" fg:x="1361" fg:w="17"/><text x="65.8404%" y="79.50"></text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once (80 samples, 3.86%)</title><rect x="63.0361%" y="85" width="3.8554%" height="15" fill="rgb(250,191,14)" fg:x="1308" fg:w="80"/><text x="63.2861%" y="95.50">osir..</text></g><g><title>osiris-899694198ab63869`osiris::runtime::current_unwrap (10 samples, 0.48%)</title><rect x="66.4096%" y="69" width="0.4819%" height="15" fill="rgb(239,60,40)" fg:x="1378" fg:w="10"/><text x="66.6596%" y="79.50"></text></g><g><title>osiris-899694198ab63869`osiris::runtime::executor::Executor::spawn (285 samples, 13.73%)</title><rect x="53.9759%" y="101" width="13.7349%" height="15" fill="rgb(206,27,48)" fg:x="1120" fg:w="285"/><text x="54.2259%" y="111.50">osiris-899694198ab638..</text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.82%)</title><rect x="66.8916%" y="85" width="0.8193%" height="15" fill="rgb(225,35,8)" fg:x="1388" fg:w="17"/><text x="67.1416%" y="95.50"></text></g><g><title>osiris-899694198ab63869`osiris::runtime::waker::raw_waker (4 samples, 0.19%)</title><rect x="67.7108%" y="101" width="0.1928%" height="15" fill="rgb(250,213,24)" fg:x="1405" fg:w="4"/><text x="67.9608%" y="111.50"></text></g><g><title>osiris-899694198ab63869`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.05%)</title><rect x="67.9036%" y="101" width="0.0482%" height="15" fill="rgb(247,123,22)" fg:x="1409" fg:w="1"/><text x="68.1536%" y="111.50"></text></g><g><title>osiris-899694198ab63869`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.05%)</title><rect x="67.9036%" y="85" width="0.0482%" height="15" fill="rgb(231,138,38)" fg:x="1409" fg:w="1"/><text x="68.1536%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.05%)</title><rect x="67.9036%" y="69" width="0.0482%" height="15" fill="rgb(231,145,46)" fg:x="1409" fg:w="1"/><text x="68.1536%" y="79.50"></text></g><g><title>osiris-899694198ab63869`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (811 samples, 39.08%)</title><rect x="29.1084%" y="117" width="39.0843%" height="15" fill="rgb(251,118,11)" fg:x="604" fg:w="811"/><text x="29.3584%" y="127.50">osiris-899694198ab63869`&lt;core::future::from_generator::GenFuture..</text></g><g><title>osiris-899694198ab63869`rand::rngs::thread::thread_rng (5 samples, 0.24%)</title><rect x="67.9518%" y="101" width="0.2410%" height="15" fill="rgb(217,147,25)" fg:x="1410" fg:w="5"/><text x="68.2018%" y="111.50"></text></g><g><title>osiris-899694198ab63869`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.58%)</title><rect x="74.4578%" y="85" width="0.5783%" height="15" fill="rgb(247,81,37)" fg:x="1545" fg:w="12"/><text x="74.7078%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (52 samples, 2.51%)</title><rect x="81.6867%" y="69" width="2.5060%" height="15" fill="rgb(209,12,38)" fg:x="1695" fg:w="52"/><text x="81.9367%" y="79.50">li..</text></g><g><title>osiris-899694198ab63869`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 1.40%)</title><rect x="84.1928%" y="69" width="1.3976%" height="15" fill="rgb(227,1,9)" fg:x="1747" fg:w="29"/><text x="84.4428%" y="79.50"></text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::insert (64 samples, 3.08%)</title><rect x="85.5904%" y="69" width="3.0843%" height="15" fill="rgb(248,47,43)" fg:x="1776" fg:w="64"/><text x="85.8404%" y="79.50">osi..</text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once (328 samples, 15.81%)</title><rect x="75.0361%" y="85" width="15.8072%" height="15" fill="rgb(221,10,30)" fg:x="1557" fg:w="328"/><text x="75.2861%" y="95.50">osiris-899694198ab63869`..</text></g><g><title>osiris-899694198ab63869`osiris::runtime::current_unwrap (45 samples, 2.17%)</title><rect x="88.6747%" y="69" width="2.1687%" height="15" fill="rgb(210,229,1)" fg:x="1840" fg:w="45"/><text x="88.9247%" y="79.50">o..</text></g><g><title>osiris-899694198ab63869`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (503 samples, 24.24%)</title><rect x="70.5542%" y="101" width="24.2410%" height="15" fill="rgb(222,148,37)" fg:x="1464" fg:w="503"/><text x="70.8042%" y="111.50">osiris-899694198ab63869`&lt;core::future::..</text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::insert (82 samples, 3.95%)</title><rect x="90.8434%" y="85" width="3.9518%" height="15" fill="rgb(234,67,33)" fg:x="1885" fg:w="82"/><text x="91.0934%" y="95.50">osir..</text></g><g><title>osiris-899694198ab63869`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll (580 samples, 27.95%)</title><rect x="68.1928%" y="117" width="27.9518%" height="15" fill="rgb(247,98,35)" fg:x="1415" fg:w="580"/><text x="68.4428%" y="127.50">osiris-899694198ab63869`&lt;osiris::task::raw_ta..</text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once (28 samples, 1.35%)</title><rect x="94.7952%" y="101" width="1.3494%" height="15" fill="rgb(247,138,52)" fg:x="1967" fg:w="28"/><text x="95.0452%" y="111.50"></text></g><g><title>osiris-899694198ab63869`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll_join (5 samples, 0.24%)</title><rect x="96.1446%" y="117" width="0.2410%" height="15" fill="rgb(213,79,30)" fg:x="1995" fg:w="5"/><text x="96.3946%" y="127.50"></text></g><g><title>osiris-899694198ab63869`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (31 samples, 1.49%)</title><rect x="96.3855%" y="117" width="1.4940%" height="15" fill="rgb(246,177,23)" fg:x="2000" fg:w="31"/><text x="96.6355%" y="127.50"></text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once (5 samples, 0.24%)</title><rect x="97.8795%" y="117" width="0.2410%" height="15" fill="rgb(230,62,27)" fg:x="2031" fg:w="5"/><text x="98.1295%" y="127.50"></text></g><g><title>osiris-899694198ab63869`core::ptr::drop_in_place&lt;osiris::task::raw_task::RawTask&lt;core::future::from_generator::GenFuture&lt;osiris::smoke_test::foo::{{closure}}::{{closure}}&gt;&gt;&gt; (8 samples, 0.39%)</title><rect x="98.1205%" y="117" width="0.3855%" height="15" fill="rgb(216,154,8)" fg:x="2036" fg:w="8"/><text x="98.3705%" y="127.50"></text></g><g><title>osiris-899694198ab63869`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 1.01%)</title><rect x="98.5060%" y="117" width="1.0120%" height="15" fill="rgb(244,35,45)" fg:x="2044" fg:w="21"/><text x="98.7560%" y="127.50"></text></g><g><title>all (2,075 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="2075"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2,074 samples, 99.95%)</title><rect x="0.0482%" y="277" width="99.9518%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="287.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (2,074 samples, 99.95%)</title><rect x="0.0482%" y="261" width="99.9518%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="271.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>osiris-899694198ab63869`std::sys::unix::thread::Thread::new::thread_start (2,074 samples, 99.95%)</title><rect x="0.0482%" y="245" width="99.9518%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="255.50">osiris-899694198ab63869`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,074 samples, 99.95%)</title><rect x="0.0482%" y="229" width="99.9518%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="239.50">osiris-899694198ab63869`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>osiris-899694198ab63869`std::sys_common::backtrace::__rust_begin_short_backtrace (2,074 samples, 99.95%)</title><rect x="0.0482%" y="213" width="99.9518%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="223.50">osiris-899694198ab63869`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>osiris-899694198ab63869`test::run_test::run_test_inner::_{{closure}} (2,074 samples, 99.95%)</title><rect x="0.0482%" y="197" width="99.9518%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="207.50">osiris-899694198ab63869`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>osiris-899694198ab63869`test::__rust_begin_short_backtrace (2,074 samples, 99.95%)</title><rect x="0.0482%" y="181" width="99.9518%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="191.50">osiris-899694198ab63869`test::__rust_begin_short_backtrace</text></g><g><title>osiris-899694198ab63869`core::ops::function::FnOnce::call_once (2,074 samples, 99.95%)</title><rect x="0.0482%" y="165" width="99.9518%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="2074"/><text x="0.2982%" y="175.50">osiris-899694198ab63869`core::ops::function::FnOnce::call_once</text></g><g><title>osiris-899694198ab63869`osiris::runtime::Runtime::block_on (2,073 samples, 99.90%)</title><rect x="0.0964%" y="149" width="99.9036%" height="15" fill="rgb(253,215,40)" fg:x="2" fg:w="2073"/><text x="0.3464%" y="159.50">osiris-899694198ab63869`osiris::runtime::Runtime::block_on</text></g><g><title>osiris-899694198ab63869`osiris::runtime::executor::Executor::block_on (1,832 samples, 88.29%)</title><rect x="11.7108%" y="133" width="88.2892%" height="15" fill="rgb(211,81,21)" fg:x="243" fg:w="1832"/><text x="11.9608%" y="143.50">osiris-899694198ab63869`osiris::runtime::executor::Executor::block_on</text></g><g><title>osiris-899694198ab63869`osiris::runtime::executor::Executor::spawn (10 samples, 0.48%)</title><rect x="99.5181%" y="117" width="0.4819%" height="15" fill="rgb(208,190,38)" fg:x="2065" fg:w="10"/><text x="99.7681%" y="127.50"></text></g></svg></svg>