<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="3031"><g><title>libdyld.dylib`start (1 samples, 0.03%)</title><rect x="0.0000%" y="277" width="0.0330%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>osiris-b47fd744f64c8101`main (1 samples, 0.03%)</title><rect x="0.0000%" y="261" width="0.0330%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>osiris-b47fd744f64c8101`std::rt::lang_start_internal (1 samples, 0.03%)</title><rect x="0.0000%" y="245" width="0.0330%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>osiris-b47fd744f64c8101`__rdl_alloc (1 samples, 0.03%)</title><rect x="0.0000%" y="229" width="0.0330%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.0330%" y="149" width="0.0330%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2830%" y="159.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.0330%" y="133" width="0.0330%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2830%" y="143.50"></text></g><g><title>osiris-b47fd744f64c8101`color_eyre::install (1 samples, 0.03%)</title><rect x="0.0660%" y="149" width="0.0330%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.3160%" y="159.50"></text></g><g><title>osiris-b47fd744f64c8101`color_eyre::config::HookBuilder::new (1 samples, 0.03%)</title><rect x="0.0660%" y="133" width="0.0330%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.3160%" y="143.50"></text></g><g><title>osiris-b47fd744f64c8101`owo_colors::dyn_styles::Style::new (1 samples, 0.03%)</title><rect x="0.0660%" y="117" width="0.0330%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.3160%" y="127.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll (41 samples, 1.35%)</title><rect x="0.0990%" y="133" width="1.3527%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="41"/><text x="0.3490%" y="143.50"></text></g><g><title>osiris-b47fd744f64c8101`core::hash::BuildHasher::hash_one (323 samples, 10.66%)</title><rect x="1.4517%" y="133" width="10.6565%" height="15" fill="rgb(250,228,42)" fg:x="44" fg:w="323"/><text x="1.7017%" y="143.50">osiris-b47fd744f..</text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once (19 samples, 0.63%)</title><rect x="12.1082%" y="133" width="0.6269%" height="15" fill="rgb(240,193,28)" fg:x="367" fg:w="19"/><text x="12.3582%" y="143.50"></text></g><g><title>osiris-b47fd744f64c8101`hashbrown::raw::RawTable&lt;T,A&gt;::insert (184 samples, 6.07%)</title><rect x="12.7351%" y="133" width="6.0706%" height="15" fill="rgb(216,20,37)" fg:x="386" fg:w="184"/><text x="12.9851%" y="143.50">osiris-b..</text></g><g><title>osiris-b47fd744f64c8101`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (551 samples, 18.18%)</title><rect x="18.8057%" y="133" width="18.1788%" height="15" fill="rgb(206,188,39)" fg:x="570" fg:w="551"/><text x="19.0557%" y="143.50">osiris-b47fd744f64c8101`hash..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.13%)</title><rect x="55.4932%" y="117" width="0.1320%" height="15" fill="rgb(217,207,13)" fg:x="1682" fg:w="4"/><text x="55.7432%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.20%)</title><rect x="55.6252%" y="117" width="0.1980%" height="15" fill="rgb(231,73,38)" fg:x="1686" fg:w="6"/><text x="55.8752%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.07%)</title><rect x="55.8232%" y="117" width="0.0660%" height="15" fill="rgb(225,20,46)" fg:x="1692" fg:w="2"/><text x="56.0732%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.20%)</title><rect x="55.8891%" y="117" width="0.1980%" height="15" fill="rgb(210,31,41)" fg:x="1694" fg:w="6"/><text x="56.1391%" y="127.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="56.0871%" y="117" width="0.0990%" height="15" fill="rgb(221,200,47)" fg:x="1700" fg:w="3"/><text x="56.3371%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.63%)</title><rect x="58.8915%" y="101" width="0.6269%" height="15" fill="rgb(226,26,5)" fg:x="1785" fg:w="19"/><text x="59.1415%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.10%)</title><rect x="59.5183%" y="101" width="0.0990%" height="15" fill="rgb(249,33,26)" fg:x="1804" fg:w="3"/><text x="59.7683%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 2.28%)</title><rect x="59.6173%" y="101" width="2.2765%" height="15" fill="rgb(235,183,28)" fg:x="1807" fg:w="69"/><text x="59.8673%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (34 samples, 1.12%)</title><rect x="60.7720%" y="85" width="1.1217%" height="15" fill="rgb(221,5,38)" fg:x="1842" fg:w="34"/><text x="61.0220%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (29 samples, 0.96%)</title><rect x="60.9370%" y="69" width="0.9568%" height="15" fill="rgb(247,18,42)" fg:x="1847" fg:w="29"/><text x="61.1870%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (41 samples, 1.35%)</title><rect x="65.3580%" y="69" width="1.3527%" height="15" fill="rgb(241,131,45)" fg:x="1981" fg:w="41"/><text x="65.6080%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (200 samples, 6.60%)</title><rect x="61.8938%" y="101" width="6.5985%" height="15" fill="rgb(249,31,29)" fg:x="1876" fg:w="200"/><text x="62.1438%" y="111.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (167 samples, 5.51%)</title><rect x="62.9825%" y="85" width="5.5097%" height="15" fill="rgb(225,111,53)" fg:x="1909" fg:w="167"/><text x="63.2325%" y="95.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (54 samples, 1.78%)</title><rect x="66.7107%" y="69" width="1.7816%" height="15" fill="rgb(238,160,17)" fg:x="2022" fg:w="54"/><text x="66.9607%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.36%)</title><rect x="68.4922%" y="101" width="0.3629%" height="15" fill="rgb(214,148,48)" fg:x="2076" fg:w="11"/><text x="68.7422%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.10%)</title><rect x="68.8552%" y="101" width="0.0990%" height="15" fill="rgb(232,36,49)" fg:x="2087" fg:w="3"/><text x="69.1052%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.16%)</title><rect x="68.9541%" y="101" width="0.1650%" height="15" fill="rgb(209,103,24)" fg:x="2090" fg:w="5"/><text x="69.2041%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.07%)</title><rect x="69.1191%" y="101" width="0.0660%" height="15" fill="rgb(229,88,8)" fg:x="2095" fg:w="2"/><text x="69.3691%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.13%)</title><rect x="69.1851%" y="101" width="0.1320%" height="15" fill="rgb(213,181,19)" fg:x="2097" fg:w="4"/><text x="69.4351%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll_join (20 samples, 0.66%)</title><rect x="69.3171%" y="101" width="0.6598%" height="15" fill="rgb(254,191,54)" fg:x="2101" fg:w="20"/><text x="69.5671%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`__rdl_alloc (4 samples, 0.13%)</title><rect x="69.9769%" y="101" width="0.1320%" height="15" fill="rgb(241,83,37)" fg:x="2121" fg:w="4"/><text x="70.2269%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once (7 samples, 0.23%)</title><rect x="70.1089%" y="101" width="0.2309%" height="15" fill="rgb(233,36,39)" fg:x="2125" fg:w="7"/><text x="70.3589%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="70.3398%" y="101" width="0.1320%" height="15" fill="rgb(226,3,54)" fg:x="2132" fg:w="4"/><text x="70.5898%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::current_unwrap (7 samples, 0.23%)</title><rect x="70.4718%" y="101" width="0.2309%" height="15" fill="rgb(245,192,40)" fg:x="2136" fg:w="7"/><text x="70.7218%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.20%)</title><rect x="72.8472%" y="53" width="0.1980%" height="15" fill="rgb(238,167,29)" fg:x="2208" fg:w="6"/><text x="73.0972%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (25 samples, 0.82%)</title><rect x="74.1669%" y="37" width="0.8248%" height="15" fill="rgb(232,182,51)" fg:x="2248" fg:w="25"/><text x="74.4169%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (138 samples, 4.55%)</title><rect x="72.4183%" y="69" width="4.5530%" height="15" fill="rgb(231,60,39)" fg:x="2195" fg:w="138"/><text x="72.6683%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (119 samples, 3.93%)</title><rect x="73.0452%" y="53" width="3.9261%" height="15" fill="rgb(208,69,12)" fg:x="2214" fg:w="119"/><text x="73.2952%" y="63.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (60 samples, 1.98%)</title><rect x="74.9918%" y="37" width="1.9795%" height="15" fill="rgb(235,93,37)" fg:x="2273" fg:w="60"/><text x="75.2418%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (172 samples, 5.67%)</title><rect x="71.3626%" y="85" width="5.6747%" height="15" fill="rgb(213,116,39)" fg:x="2163" fg:w="172"/><text x="71.6126%" y="95.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.07%)</title><rect x="76.9713%" y="69" width="0.0660%" height="15" fill="rgb(222,207,29)" fg:x="2333" fg:w="2"/><text x="77.2213%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.16%)</title><rect x="77.0373%" y="85" width="0.1650%" height="15" fill="rgb(206,96,30)" fg:x="2335" fg:w="5"/><text x="77.2873%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.10%)</title><rect x="77.2022%" y="85" width="0.0990%" height="15" fill="rgb(218,138,4)" fg:x="2340" fg:w="3"/><text x="77.4522%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.66%)</title><rect x="77.7301%" y="69" width="0.6598%" height="15" fill="rgb(250,191,14)" fg:x="2356" fg:w="20"/><text x="77.9801%" y="79.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="78.3900%" y="69" width="0.0660%" height="15" fill="rgb(239,60,40)" fg:x="2376" fg:w="2"/><text x="78.6400%" y="79.50"></text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once (39 samples, 1.29%)</title><rect x="77.3012%" y="85" width="1.2867%" height="15" fill="rgb(206,27,48)" fg:x="2343" fg:w="39"/><text x="77.5512%" y="95.50"></text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::current_unwrap (4 samples, 0.13%)</title><rect x="78.4560%" y="69" width="0.1320%" height="15" fill="rgb(225,35,8)" fg:x="2378" fg:w="4"/><text x="78.7060%" y="79.50"></text></g><g><title>osiris-b47fd744f64c8101`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (185 samples, 6.10%)</title><rect x="78.5879%" y="85" width="6.1036%" height="15" fill="rgb(250,213,24)" fg:x="2382" fg:w="185"/><text x="78.8379%" y="95.50">osiris-b..</text></g><g><title>osiris-b47fd744f64c8101`hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.66%)</title><rect x="84.0317%" y="69" width="0.6598%" height="15" fill="rgb(247,123,22)" fg:x="2547" fg:w="20"/><text x="84.2817%" y="79.50"></text></g><g><title>osiris-b47fd744f64c8101`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.10%)</title><rect x="84.5925%" y="53" width="0.0990%" height="15" fill="rgb(231,138,38)" fg:x="2564" fg:w="3"/><text x="84.8425%" y="63.50"></text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::executor::Executor::spawn (495 samples, 16.33%)</title><rect x="70.7027%" y="101" width="16.3312%" height="15" fill="rgb(231,145,46)" fg:x="2143" fg:w="495"/><text x="70.9527%" y="111.50">osiris-b47fd744f64c8101`o..</text></g><g><title>osiris-b47fd744f64c8101`hashbrown::raw::RawTable&lt;T,A&gt;::insert (71 samples, 2.34%)</title><rect x="84.6915%" y="85" width="2.3425%" height="15" fill="rgb(251,118,11)" fg:x="2567" fg:w="71"/><text x="84.9415%" y="95.50">o..</text></g><g><title>osiris-b47fd744f64c8101`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (940 samples, 31.01%)</title><rect x="56.1861%" y="117" width="31.0129%" height="15" fill="rgb(217,147,25)" fg:x="1703" fg:w="940"/><text x="56.4361%" y="127.50">osiris-b47fd744f64c8101`&lt;core::future::from_genera..</text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::waker::raw_waker (5 samples, 0.16%)</title><rect x="87.0340%" y="101" width="0.1650%" height="15" fill="rgb(247,81,37)" fg:x="2638" fg:w="5"/><text x="87.2840%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 1.06%)</title><rect x="91.1910%" y="85" width="1.0558%" height="15" fill="rgb(209,12,38)" fg:x="2764" fg:w="32"/><text x="91.4410%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (49 samples, 1.62%)</title><rect x="94.0944%" y="69" width="1.6166%" height="15" fill="rgb(227,1,9)" fg:x="2852" fg:w="49"/><text x="94.3444%" y="79.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.40%)</title><rect x="95.7110%" y="69" width="0.3959%" height="15" fill="rgb(248,47,43)" fg:x="2901" fg:w="12"/><text x="95.9610%" y="79.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (253 samples, 8.35%)</title><rect x="88.6506%" y="101" width="8.3471%" height="15" fill="rgb(221,10,30)" fg:x="2687" fg:w="253"/><text x="88.9006%" y="111.50">osiris-b47fd..</text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once (144 samples, 4.75%)</title><rect x="92.2468%" y="85" width="4.7509%" height="15" fill="rgb(210,229,1)" fg:x="2796" fg:w="144"/><text x="92.4968%" y="95.50">osiris..</text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::current_unwrap (27 samples, 0.89%)</title><rect x="96.1069%" y="69" width="0.8908%" height="15" fill="rgb(222,148,37)" fg:x="2913" fg:w="27"/><text x="96.3569%" y="79.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll (335 samples, 11.05%)</title><rect x="87.1989%" y="117" width="11.0525%" height="15" fill="rgb(234,67,33)" fg:x="2643" fg:w="335"/><text x="87.4489%" y="127.50">osiris-b47fd744f..</text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once (38 samples, 1.25%)</title><rect x="96.9977%" y="101" width="1.2537%" height="15" fill="rgb(247,98,35)" fg:x="2940" fg:w="38"/><text x="97.2477%" y="111.50"></text></g><g><title>osiris-b47fd744f64c8101`&lt;osiris::task::raw_task::RawTask&lt;F&gt; as osiris::task::Task&gt;::poll_join (1 samples, 0.03%)</title><rect x="98.2514%" y="117" width="0.0330%" height="15" fill="rgb(247,138,52)" fg:x="2978" fg:w="1"/><text x="98.5014%" y="127.50"></text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once (5 samples, 0.16%)</title><rect x="98.2844%" y="117" width="0.1650%" height="15" fill="rgb(213,79,30)" fg:x="2979" fg:w="5"/><text x="98.5344%" y="127.50"></text></g><g><title>osiris-b47fd744f64c8101`core::ptr::drop_in_place&lt;osiris::task::raw_task::RawTask&lt;core::future::from_generator::GenFuture&lt;osiris::smoke_test::foo::{{closure}}::{{closure}}&gt;&gt;&gt; (3 samples, 0.10%)</title><rect x="98.4494%" y="117" width="0.0990%" height="15" fill="rgb(246,177,23)" fg:x="2984" fg:w="3"/><text x="98.6994%" y="127.50"></text></g><g><title>osiris-b47fd744f64c8101`hashbrown::raw::RawTable&lt;T,A&gt;::insert (37 samples, 1.22%)</title><rect x="98.5483%" y="117" width="1.2207%" height="15" fill="rgb(230,62,27)" fg:x="2987" fg:w="37"/><text x="98.7983%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,029 samples, 99.93%)</title><rect x="0.0330%" y="277" width="99.9340%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="287.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,029 samples, 99.93%)</title><rect x="0.0330%" y="261" width="99.9340%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="271.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>osiris-b47fd744f64c8101`std::sys::unix::thread::Thread::new::thread_start (3,029 samples, 99.93%)</title><rect x="0.0330%" y="245" width="99.9340%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="255.50">osiris-b47fd744f64c8101`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,029 samples, 99.93%)</title><rect x="0.0330%" y="229" width="99.9340%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="239.50">osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>osiris-b47fd744f64c8101`std::sys_common::backtrace::__rust_begin_short_backtrace (3,029 samples, 99.93%)</title><rect x="0.0330%" y="213" width="99.9340%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="223.50">osiris-b47fd744f64c8101`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>osiris-b47fd744f64c8101`test::run_test::run_test_inner::_{{closure}} (3,029 samples, 99.93%)</title><rect x="0.0330%" y="197" width="99.9340%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="207.50">osiris-b47fd744f64c8101`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>osiris-b47fd744f64c8101`test::__rust_begin_short_backtrace (3,029 samples, 99.93%)</title><rect x="0.0330%" y="181" width="99.9340%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="191.50">osiris-b47fd744f64c8101`test::__rust_begin_short_backtrace</text></g><g><title>osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once (3,029 samples, 99.93%)</title><rect x="0.0330%" y="165" width="99.9340%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="3029"/><text x="0.2830%" y="175.50">osiris-b47fd744f64c8101`core::ops::function::FnOnce::call_once</text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::Runtime::block_on (3,027 samples, 99.87%)</title><rect x="0.0990%" y="149" width="99.8680%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="3027"/><text x="0.3490%" y="159.50">osiris-b47fd744f64c8101`osiris::runtime::Runtime::block_on</text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::executor::Executor::block_on (1,909 samples, 62.98%)</title><rect x="36.9845%" y="133" width="62.9825%" height="15" fill="rgb(242,79,21)" fg:x="1121" fg:w="1909"/><text x="37.2345%" y="143.50">osiris-b47fd744f64c8101`osiris::runtime::executor::Executor::block_on</text></g><g><title>osiris-b47fd744f64c8101`osiris::runtime::executor::Executor::spawn (6 samples, 0.20%)</title><rect x="99.7691%" y="117" width="0.1980%" height="15" fill="rgb(211,96,35)" fg:x="3024" fg:w="6"/><text x="100.0191%" y="127.50"></text></g><g><title>all (3,031 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="3031"/><text x="0.2500%" y="303.50"></text></g><g><title>osiris-b47fd744f64c8101`main (1 samples, 0.03%)</title><rect x="99.9670%" y="277" width="0.0330%" height="15" fill="rgb(211,81,21)" fg:x="3030" fg:w="1"/><text x="100.2170%" y="287.50"></text></g></svg></svg>